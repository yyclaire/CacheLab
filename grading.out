
CS:APP Cache Lab: Grading Sheet for yuanyue-csim.c

Part 1: Compiling test framework

gcc -g -Wall -Werror -std=c99 -o csim csim.c cachelab.c -lm 
gcc -g -Wall -Werror -std=c99 -o csim-ref csim-ref.c cachelab.c -lm
gcc -g -Wall -Werror -std=c99 -o test-csim test-csim.c 


Part 2: Running the driver

test-csim out:

 Invoked for GRADING.
                        Your simulator     Reference simulator
Points (s,E,b)    Hits  Misses  Evicts    Hits  Misses  Evicts
     3 (1,1,1)       9       8       6       9       8       6  traces/yi2.trace
     3 (4,2,4)       4       5       2       4       5       2  traces/yi.trace
     3 (2,1,4)       2       3       1       2       3       1  traces/dave.trace
     3 (2,1,3)     167      71      67     167      71      67  traces/trans.trace
     3 (3,2,4)     226      12       0     226      12       0  traces/trans.trace
     3 (1,4,3)     204      34      26     204      34      26  traces/trans.trace
     3 (4,2,5)     231       7       0     231       7       0  traces/trans.trace
     6 (5,8,6)  140891    5209    4953  140891    5209    4953  traces/sort.trace
     6 (6,3,5)  280805    6159    5967  280805    6159    5967  traces/long.trace
     6 (5,4,4)  135205   36298   36170  135205   36298   36170  traces/sort4k.trace
    39

TEST_CSIM_RESULTS=39


Final score: 39



Part 3: Grade


Score : 39.0 / 39

Part 4: Handin files for yuanyue-csim.c


*** csim.c ***
/*Name: Yue Yuan
Wustl key: yuanyue
ID:436711
lab: cache lab
*/

#include "cachelab.h"
#include <stdio.h>
#include <unistd.h>
#include <getopt.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

typedef struct{
    int valid;
    unsigned long long int tag;
    int usedTime;
}set_line;

typedef struct{
    set_line *lines;
    int usedTime;
}set;

typedef struct{
    set *sets;
    int s;
    int S;
    int E;
    int b;

}cache;

typedef struct {
    int hit;
    int miss;
    int evict;
}output;


 
cache cacheConstructor(int s, int E, int b){

    cache newCache;
    set newSet;
    set_line line;
    newCache.s = s;
    newCache.S = pow(2.0, s);
    newCache.E = E;
    newCache.b = b;


    newCache.sets = (set*)malloc(sizeof(set)*newCache.S);

   
    int i=0;
    for(i=0;i< newCache.S;i++){//sets
        newSet.lines = (set_line*)malloc(sizeof(set_line)*E);
        newSet.usedTime = 0;
        newCache.sets[i] = newSet;
    int j=0;
        for(j=0;j<E;j++){
            line.valid = 0;
            line.tag = 0;
            line.usedTime = 0;
            newSet.lines[j] = line;


        }
    }

    return newCache;

}
//get tag
unsigned long long int getTag (cache newCache, unsigned long long int address){
    unsigned long long int tag = address >> (newCache.s+newCache.b);
    return tag;
}
//get set
unsigned long long int getSet(cache newCache, unsigned long long int address){
    int tagSize = 64-(newCache.b+newCache.s);
    unsigned long long int add = address << tagSize;
    unsigned long long int setN = add >> (tagSize+newCache.b);
    return setN;
}
int checkSetFull(set newSet, int E, int *lineIndex){
    int i;
    for (i = 0; i<E;i++){
            set_line targetLine = newSet.lines[i];
            if(!targetLine.valid){
                (*lineIndex) = i;
                return 0;
            }
    }
    return 1;
}

int findEvictedLine(set newSet, int E){
    int i;
    int tmp;
    int lineIndex = 0;
    int min=newSet.lines[0].usedTime;
    for(i=0;i<E;i++){
        tmp = newSet.lines[i].usedTime;
        if(tmp<min){
            min = tmp;
            lineIndex = i;
        }
    }
    return lineIndex;
}

// Start simulate cache
output cacheSimulator(cache newCache, unsigned long long int address, output output){
    unsigned long long int tag = getTag(newCache,address);
    unsigned long long int setIndex = getSet(newCache,address);

//find the set
    set targetSet = newCache.sets[setIndex];
//update used Time for the target set
    newCache.sets[setIndex].usedTime++;
    int latest_used_time = newCache.sets[setIndex].usedTime;
    int lineNumber = newCache.E;
  

    int i = 0;
    int missLine;
    int *missLineIndex = &missLine;
   
  
    
    for(i=0; i<lineNumber; i++){
        set_line targetLine = targetSet.lines[i];
        if(targetLine.valid && targetLine.tag == tag){
//Hit Hit Hit!!!
                output.hit++;
                newCache.sets[setIndex].lines[i].usedTime = latest_used_time;
                return output;
               // printf("running hit-2\n");
            
        }
    }
// No hit!

    if(checkSetFull(targetSet, lineNumber, missLineIndex)== 0){ // cache is not full
//Miss Miss Miss!!!
                    output.miss++;
                    set_line line = targetSet.lines[missLine];
                    line.valid = 1;
                    line.tag = tag;
                    line.usedTime = latest_used_time;
                    newCache.sets[setIndex].lines[missLine] = line;
                    return output;
                   // printf("running miss-2\n");
    }else{
//Evict Evict Evict!!!
                output.evict++;
                output.miss++;
                int evictedLineIndex = findEvictedLine(targetSet, lineNumber);
                set_line evictedLine = targetSet.lines[evictedLineIndex];
                evictedLine.tag = tag;
                evictedLine.valid = 1;
                evictedLine.usedTime = latest_used_time;
                newCache.sets[setIndex].lines[evictedLineIndex] = evictedLine;
                 return output;
        }
        
    
    //printf("output simulator\n");
  
}

//----------------------------------------------------------------------
//print menu
void usageMsg(){
    printf("Usage: ./csim [-hv] -s <s> -E <E> -b <b> -t <tracefile>\n \
    • -h: Optional help flag that prints usage info\n \
    • -v: Optional verbose flag that displays trace info \n \
    • -s <s>: Number of set index bits (S = 2^s is the number of sets) \n \
    • -E <E>: Associativity (number of lines per set) \n \
    • -b <b>: Number of block bits (B = 2b is the block size) \n \
    • -t <tracefile>: Name of the valgrind trace to replay\n");
}


int main(int argc, char **argv)
{
//initialize variable
    cache newCache;
    int s = 0;
    int E = 0;  
    int b = 0;
    output result;
    result.hit = 0;
    result.miss = 0;
    result.evict = 0;

    char *traces;
    
 
    unsigned long long int address;

    int size;
    char cmd;
    char opt;
    while( (opt=getopt(argc,argv,"s:E:b:t:vh")) != -1)
    {
        switch(opt)
        {
        case 's':
            s = atoi(optarg);
            break;
        case 'E':
            E = atoi(optarg);
            break;
        case 'b':
            b = atoi(optarg);
            break;
        case 't':
            traces = optarg;
            break;
        case 'v':
          //  verbosity = 1;
            break;
        case 'h':
            usageMsg();
            exit(0);
        default:
            usageMsg();
            exit(1);
        }
    }
    if (s == 0 || E == 0 || b == 0 || traces == NULL) 
    {
        usageMsg();
        exit(1);
    }

    newCache = cacheConstructor(s, E, b);
    FILE *readFile;
    readFile  = fopen(traces, "r");


    if (readFile != NULL) {
        while (fscanf(readFile, " %c %llx,%d", &cmd, &address, &size) == 3) {
 
            switch(cmd) {
                case 'I':
                    break;
                case 'L':
                    result = cacheSimulator( newCache, address,result);
                    break;
                case 'S':
                    result = cacheSimulator(newCache, address,result);
                    break;
                case 'M':   
                    result = cacheSimulator(newCache, address,result);                   
                    result = cacheSimulator(newCache, address,result);   
                    break;
                default:
                    break;
            }
        }
    }
    printSummary(result.hit, result.miss, result.evict);
    fclose(readFile);

    return 0;

}
*** trans.c ***
cat: /tmp/yuanyue-csim.c.21427/trans.c: No such file or directory
